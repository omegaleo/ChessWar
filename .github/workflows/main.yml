name: Build

on:
  push:
    branches:
      - 'releases/**'
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  RELEASE_URL: ''

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ARTIFACT_TOKEN }}
        with:
          tag_name: ${GITHUB_REF##*/}
          release_name: Release ${GITHUB_REF##*/}
      - name: Set Release URL
        run: echo "::set-env name=RELEASE_URL::${{ steps.create-release.outputs.upload_url }}"
  upload-release:
    name: Upload build files to the release
    runs-on: ubuntu-latest
    needs: buildAndTestForSomePlatforms
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - ./
        targetPlatform:
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - WebGL # WebGL.
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Build (${{ matrix.targetPlatform }})
      - name: Archive Content
        uses: thedoctor0/zip-release@master
        with:
          filename: ${{ matrix.targetPlatform }}.zip
      - name: Upload assets to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ARTIFACT_TOKEN }}
        with:
          upload_url: $RELEASE_URL
          asset_path: ${{ matrix.targetPlatform }}.zip
          asset_name: ${{ matrix.targetPlatform }}.zip
          asset_content_type: application/zip
  buildAndTestForSomePlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - ./
        targetPlatform:
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - WebGL # WebGL.
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-buildAndTest-${{ matrix.projectPath }}-buildAndTest-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-buildAndTest-
            Library-${{ matrix.projectPath }}-
      - name: Build Artifacts
        uses: game-ci/unity-builder@v2
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: "-myParameter myValue -myBoolean -ThirdParameter andItsValue"
          allowDirtyBuild: true
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Build (${{ matrix.targetPlatform }})
          path: build/${{ matrix.targetPlatform }}
